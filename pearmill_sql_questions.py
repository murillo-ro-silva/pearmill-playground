# -*- coding: utf-8 -*-
"""pearmill_sql_questions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q5FSdZb0vfWBkkwqrkyVVzkcuR9l8AjB
"""

!git clone https://github.com/murillo-ro-silva/pearmill-playground.git

"""## **Using Duck DB**"""

import duckdb

def create_connection ():
  return duckdb.connect(database=':memory:')

def execute_query (query):
  return conn.execute(query)

conn = create_connection ()

file_path = '/content/pearmill-playground-test/data.csv' # If run locally, make sure to change it
query_create_table = f"CREATE TABLE customer_data AS SELECT * FROM read_csv_auto('{file_path}');"

execute_query(query_create_table)

query_results = """
WITH backlog_data AS (
    SELECT
        *,
        DATE_PART('day', state_2 - state_1) AS days_to_stage_2
    FROM
        customer_data
    WHERE
        DATE_PART('day', state_2 - state_1) BETWEEN 1 AND 14
),

series AS (
    SELECT
        generate_series AS i
    FROM
        generate_series(0, 14)
),

daily_backlog AS (
    SELECT
        backlog_data.state_1 + INTERVAL '1 day' * series.i AS backlog_date
    FROM
        backlog_data
    JOIN
        series ON series.i <= backlog_data.days_to_stage_2
),

weekly_backlog AS (
    SELECT
        DATE_TRUNC('week', backlog_date) AS week,
        COUNT(*) AS backlog
    FROM
        daily_backlog
    GROUP BY
        DATE_TRUNC('week', backlog_date)
)

SELECT
    week,
    AVG(backlog) AS average_backlog
FROM
    weekly_backlog
GROUP BY
    week
ORDER BY
    average_backlog
"""

execute_query(query_results).fetchdf()

"""## **Summary**
* `backlog_data`: Filters the records to those transitioning within 1 to 14 days and calculates the days difference.
* `series`: Generates a series of integers from 0 to 14.
* `daily_backlog`: Generates a daily backlog date series for each record based on the days difference.
* `weekly_backlog`: Aggregates the daily backlog dates by week and counts the number of records per week.
* `Final` Computes the average backlog per week.


## **Answers:**
* Besides using Duckdb, the SQL ANSI use Postgre type.
* The top 3 worst weeks was: 2016-02-22	, 2016-03-07 and 2016-02-29
"""